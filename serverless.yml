service: bandego

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function

provider:
  name: aws
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-data-table"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-data-table/index/*"

functions:
  NewImage:
    handler: dist/newImage/index.handler
    events:
      - http:
          path: /newImage
          method: post
    environment:
      COUNT_TABLE: CountTable
    iamRoleStatementsName: bandego-NewImage-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:*
        Resource:
          - '*'

  GetCount:
    handler: dist/getCount/index.handler
    events:
      - http:
          path: /getCount
          method: get
    environment:
      COUNT_TABLE: CountTable
    iamRoleStatementsName: bandego-GetCount-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:*
        Resource:
          - '*'

resources:
  Resources:
    CountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CountTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: allRecordsKey
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CreatedAtIndex
            KeySchema:
              - AttributeName: allRecordsKey
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    # ImageBucket:
    #   Type: AWS::S3::Bucket
    #   # ...

package:
  individually: true
  patterns:
    - '!node_modules/**'